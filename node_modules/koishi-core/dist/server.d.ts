/// <reference types="node" />
import WebSocket from 'ws';
import * as http from 'http';
import { Meta, VersionInfo } from './meta';
import { App } from './app';
import { CQResponse } from './sender';
export declare abstract class Server {
    appList: App[];
    version: VersionInfo;
    appMap: Record<number, App>;
    isListening: boolean;
    protected abstract _listen(): Promise<void>;
    protected abstract _close(): void;
    constructor(app: App);
    /**
     * representative app
     */
    get app(): App;
    protected debug(format: any, ...params: any[]): void;
    protected prepareMeta(data: any): Meta<import("./meta").PostType>;
    parseMeta(meta: Meta): string[];
    dispatchMeta(meta: Meta): void;
    bind(app: App): this;
    versionLessThan(major: number, minor?: number, patch?: number): boolean;
    listen(): Promise<void>;
    close(): void;
}
export declare class HttpServer extends Server {
    server: http.Server;
    constructor(app: App);
    _listen(): Promise<void>;
    _close(): void;
}
export declare class WsClient extends Server {
    socket: WebSocket;
    private _retryCount;
    private _listeners;
    send(data: any): Promise<CQResponse>;
    _listen(): Promise<void>;
    _close(): void;
}
export declare type ServerType = 'http' | 'ws';
export declare const serverMap: Record<ServerType, Record<keyof any, Server>>;
export declare function createServer(app: App): Server;
