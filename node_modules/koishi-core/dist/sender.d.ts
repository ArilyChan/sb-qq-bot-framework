import { App } from './app';
import { GroupMemberInfo, StatusInfo, VersionInfo, Meta, FriendInfo, GroupInfo, Credentials, AccountInfo, StrangerInfo, ListedGroupInfo, VipInfo, GroupNoticeInfo, ContextType, MessageType } from './meta';
export declare class SenderError extends Error {
    constructor(args: Record<string, any>, url: string, retcode: number, selfId: number);
}
export declare type RecordFormat = 'mp3' | 'amr' | 'wma' | 'm4a' | 'spx' | 'ogg' | 'wav' | 'flac';
export declare type DataDirectoryType = 'image' | 'record' | 'show' | 'bface';
export interface CQResponse {
    status: string;
    retcode: number;
    data: any;
    echo?: number;
}
export declare class Sender {
    app: App;
    protected _get: (action: string, params: Record<string, any>) => Promise<CQResponse>;
    constructor(app: App);
    get<T = any>(action: string, params?: Record<string, any>, silent?: boolean): Promise<T>;
    getAsync(action: string, params?: Record<string, any>): Promise<void>;
    private _assertInteger;
    private _assertElement;
    private _assertVersion;
    _createSendMeta(sendType: MessageType, $ctxType: ContextType, $ctxId: number, message: string): Meta<"send">;
    sendMsg(type: MessageType, ctxId: number, message: string, autoEscape?: boolean): Promise<number>;
    sendMsgAsync(type: MessageType, ctxId: number, message: string, autoEscape?: boolean): Promise<void>;
    sendGroupMsg(groupId: number, message: string, autoEscape?: boolean): Promise<number>;
    sendGroupMsgAsync(groupId: number, message: string, autoEscape?: boolean): Promise<void>;
    sendDiscussMsg(discussId: number, message: string, autoEscape?: boolean): Promise<number>;
    sendDiscussMsgAsync(discussId: number, message: string, autoEscape?: boolean): Promise<void>;
    sendPrivateMsg(userId: number, message: string, autoEscape?: boolean): Promise<number>;
    sendPrivateMsgAsync(userId: number, message: string, autoEscape?: boolean): Promise<void>;
    deleteMsg(messageId: number): Promise<void>;
    deleteMsgAsync(messageId: number): Promise<void>;
    sendLike(userId: number, times?: number): Promise<void>;
    sendLikeAsync(userId: number, times?: number): Promise<void>;
    setGroupKick(groupId: number, userId: number, rejectAddRequest?: boolean): Promise<void>;
    setGroupKickAsync(groupId: number, userId: number, rejectAddRequest?: boolean): Promise<void>;
    setGroupBan(groupId: number, userId: number, duration?: number): Promise<void>;
    setGroupBanAsync(groupId: number, userId: number, duration?: number): Promise<void>;
    setGroupAnonymousBan(groupId: number, anonymous: object, duration?: number): Promise<void>;
    setGroupAnonymousBan(groupId: number, flag: string, duration?: number): Promise<void>;
    setGroupAnonymousBanAsync(groupId: number, anonymous: object, duration?: number): Promise<void>;
    setGroupAnonymousBanAsync(groupId: number, flag: string, duration?: number): Promise<void>;
    setGroupWholeBan(groupId: number, enable?: boolean): Promise<void>;
    setGroupWholeBanAsync(groupId: number, enable?: boolean): Promise<void>;
    setGroupAdmin(groupId: number, userId: number, enable?: boolean): Promise<void>;
    setGroupAdminAsync(groupId: number, userId: number, enable?: boolean): Promise<void>;
    setGroupAnonymous(groupId: number, enable?: boolean): Promise<void>;
    setGroupAnonymousAsync(groupId: number, enable?: boolean): Promise<void>;
    setGroupCard(groupId: number, userId: number, card?: string): Promise<void>;
    setGroupCardAsync(groupId: number, userId: number, card?: string): Promise<void>;
    setGroupSpecialTitle(groupId: number, userId: number, specialTitle?: string, duration?: number): Promise<void>;
    setGroupSpecialTitleAsync(groupId: number, userId: number, specialTitle?: string, duration?: number): Promise<void>;
    setGroupLeave(groupId: number, isDismiss?: boolean): Promise<void>;
    setGroupLeaveAsync(groupId: number, isDismiss?: boolean): Promise<void>;
    setDiscussLeave(discussId: number): Promise<void>;
    setDiscussLeaveAsync(discussId: number): Promise<void>;
    setFriendAddRequest(flag: string, approve?: boolean): Promise<void>;
    setFriendAddRequest(flag: string, remark?: string): Promise<void>;
    setFriendAddRequestAsync(flag: string, approve?: boolean): Promise<void>;
    setFriendAddRequestAsync(flag: string, remark?: string): Promise<void>;
    setGroupAddRequest(flag: string, subType: 'add' | 'invite', approve?: boolean): Promise<void>;
    setGroupAddRequest(flag: string, subType: 'add' | 'invite', reason?: string): Promise<void>;
    setGroupAddRequestAsync(flag: string, subType: 'add' | 'invite', approve?: boolean): Promise<void>;
    setGroupAddRequestAsync(flag: string, subType: 'add' | 'invite', reason?: string): Promise<void>;
    getLoginInfo(): Promise<AccountInfo>;
    getVipInfo(): Promise<VipInfo>;
    getStrangerInfo(userId: number, noCache?: boolean): Promise<StrangerInfo>;
    getFriendList(): Promise<FriendInfo[]>;
    getGroupInfo(groupId: number, noCache?: boolean): Promise<GroupInfo>;
    getGroupList(): Promise<ListedGroupInfo[]>;
    getGroupMemberInfo(groupId: number, userId: number, noCache?: boolean): Promise<GroupMemberInfo>;
    getGroupMemberList(groupId: number): Promise<GroupMemberInfo[]>;
    getGroupNotice(groupId: number): Promise<GroupNoticeInfo[]>;
    sendGroupNotice(groupId: number, title: string, content: string): Promise<void>;
    sendGroupNoticeAsync(groupId: number, title: string, content: string): Promise<void>;
    getCookies(domain?: string): Promise<string>;
    getCsrfToken(): Promise<number>;
    getCredentials(domain?: string): Promise<Credentials>;
    getRecord(file: string, outFormat: RecordFormat, fullPath?: boolean): Promise<string>;
    getImage(file: string): Promise<string>;
    canSendRecord(): Promise<boolean>;
    canSendImage(): Promise<boolean>;
    getStatus(): Promise<StatusInfo>;
    getVersionInfo(): Promise<VersionInfo>;
    setRestart(cleanLog?: boolean, cleanCache?: boolean, cleanEvent?: boolean): Promise<void>;
    setRestartPlugin(delay?: number): Promise<void>;
    cleanDataDir(dataDir: DataDirectoryType): Promise<void>;
    cleanDataDirAsync(dataDir: DataDirectoryType): Promise<void>;
    cleanPluginLog(): Promise<void>;
    cleanPluginLogAsync(): Promise<void>;
}
