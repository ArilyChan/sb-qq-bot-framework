import { Server, ServerType } from './server';
import { Command, ShortcutConfig, ParsedCommandLine } from './command';
import { Context, Middleware, NextFunction, ContextScope, Events, EventMap } from './context';
import { DatabaseConfig } from './database';
import { Meta } from './meta';
export interface AppOptions {
    port?: number;
    token?: string;
    secret?: string;
    selfId?: number;
    server?: string;
    type?: ServerType;
    database?: DatabaseConfig;
    nickname?: string | string[];
    retryTimes?: number;
    retryInterval?: number;
    maxMiddlewares?: number;
    commandPrefix?: string | string[];
    defaultAuthority?: number | ((meta: Meta) => number);
    quickOperationTimeout?: number;
    similarityCoefficient?: number;
}
export declare const appMap: Record<number, App>;
export declare const appList: App[];
export declare function onStart(hook: (...app: App[]) => void): void;
export declare function onStop(hook: (...app: App[]) => void): void;
export declare function startAll(): Promise<void>;
export declare function stopAll(): Promise<void>;
export declare function getSelfIds(): Promise<number[]>;
export interface MajorContext extends Context {
    except(...ids: number[]): Context;
}
export declare enum Status {
    closed = 0,
    opening = 1,
    open = 2,
    closing = 3
}
export declare class App extends Context {
    app: this;
    options: AppOptions;
    server: Server;
    atMeRE: RegExp;
    prefixRE: RegExp;
    nicknameRE: RegExp;
    status: Status;
    _commands: Command[];
    _commandMap: Record<string, Command>;
    _shortcuts: ShortcutConfig[];
    _shortcutMap: Record<string, Command>;
    _middlewares: [Context, Middleware][];
    private _users;
    private _groups;
    private _discusses;
    private _isReady;
    private _middlewareCounter;
    private _middlewareSet;
    private _contexts;
    constructor(options?: AppOptions);
    get users(): MajorContext;
    get groups(): MajorContext;
    get discusses(): MajorContext;
    get selfId(): number;
    get version(): import("./meta").VersionInfo;
    prepare(selfId?: number): void;
    destroy(): void;
    createContext(scope: string | ContextScope): Context;
    discuss(...ids: number[]): Context;
    group(...ids: number[]): Context;
    user(...ids: number[]): Context;
    start(): Promise<void>;
    stop(): Promise<void>;
    emitEvent<K extends Events>(meta: Meta, event: K, ...payload: Parameters<EventMap[K]>): void;
    private _preprocess;
    parseCommandLine(message: string, meta: Meta<'message'>): ParsedCommandLine;
    private _attachGroup;
    private _attachUser;
    executeCommandLine(message: string, meta: Meta<'message'>, next?: NextFunction): Promise<any>;
    private _applyMiddlewares;
}
