"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
function randomId(length = 8) {
    let output = '';
    for (let index = length; index > 0; --index) {
        output += chars[Math.floor(Math.random() * 62)];
    }
    return output;
}
exports.randomId = randomId;
function randomReal(...args) {
    const start = args.length > 1 ? args[0] : 0;
    const end = args[args.length - 1];
    return Math.random() * (end - start) + start;
}
exports.randomReal = randomReal;
function randomInt(...args) {
    return Math.floor(randomReal(...args));
}
exports.randomInt = randomInt;
function randomPick(source) {
    return source[Math.floor(Math.random() * source.length)];
}
exports.randomPick = randomPick;
function randomSplice(source) {
    return source.splice(Math.floor(Math.random() * source.length), 1)[0];
}
exports.randomSplice = randomSplice;
function randomMultiPick(source, count) {
    source = source.slice();
    const result = [];
    const length = Math.min(source.length, count);
    for (let i = 0; i < length; i += 1) {
        const index = Math.floor(Math.random() * source.length);
        const [item] = source.splice(index, 1);
        result.push(item);
    }
    return result;
}
exports.randomMultiPick = randomMultiPick;
function randomWeightedPick(weights, value = Math.random()) {
    const total = Object.entries(weights).reduce((prev, [_, curr]) => prev + curr, 0);
    const pointer = value * total;
    let counter = 0;
    for (const key in weights) {
        counter += weights[key];
        if (pointer < counter)
            return key;
    }
}
exports.randomWeightedPick = randomWeightedPick;
function randomBool(probability) {
    if (probability >= 1)
        return true;
    if (probability <= 0)
        return false;
    return Math.random() / probability < 1;
}
exports.randomBool = randomBool;
//# sourceMappingURL=random.js.map