"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const koishi_core_1 = require("koishi-core");
const koishi_utils_1 = require("koishi-utils");
koishi_core_1.injectMethods('mysql', 'schedule', {
    createSchedule(time, assignee, interval, command, meta) {
        return this.create('schedule', { time, assignee, interval, command, meta });
    },
    removeSchedule(id) {
        return this.query('DELETE FROM `schedule` WHERE `id` = ?', [id]);
    },
    async getSchedule(id) {
        const data = await this.query('SELECT * FROM `schedule` WHERE `id` = ?', [id]);
        return data[0];
    },
    async getAllSchedules(assignees) {
        let queryString = 'SELECT * FROM `schedule`';
        if (!assignees)
            assignees = await koishi_core_1.getSelfIds();
        queryString += ` WHERE \`assignee\` IN (${assignees.join(',')})`;
        return this.query(queryString);
    },
});
koishi_core_1.injectMethods('level', 'schedule', {
    createSchedule(time, assignee, interval, command, meta) {
        return this.create('schedule', { time, assignee, interval, command, meta });
    },
    removeSchedule(id) {
        return this.remove('schedule', id);
    },
    getSchedule(id) {
        return this.tables.schedule.get(id).catch(koishi_utils_1.noop);
    },
    async getAllSchedules(assignees) {
        if (!assignees)
            assignees = await koishi_core_1.getSelfIds();
        return new Promise((resolve) => {
            const data = [];
            this.tables.schedule.createValueStream()
                .on('data', item => assignees.includes(item.assignee) ? data.push(item) : null)
                .on('end', () => resolve(data));
        });
    },
});
