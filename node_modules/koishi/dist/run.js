"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const perf_hooks_1 = require("perf_hooks");
const koishi_utils_1 = require("koishi-utils");
const child_process_1 = require("child_process");
const path_1 = require("path");
const utils_1 = require("./utils");
process.env.KOISHI_START_TIME = '' + perf_hooks_1.performance.now();
function createWorker(options) {
    const child = child_process_1.fork(path_1.resolve(__dirname, 'worker'), [], {
        execArgv: options['--'],
    });
    child.on('exit', (code) => {
        if (code >= 0)
            process.exit(code);
        createWorker(options);
    });
}
function default_1(cli) {
    cli.command('run [file]', 'start a koishi bot')
        .alias('start')
        .option('--log-level <level>', 'specify log level (default: 2)')
        .option('--silent', 'use log level 0 (print no message)')
        .option('--debug', 'use log level 3 (print all messages)')
        .action((file, options) => {
        let logLevel = options.logLevel;
        if (options.silent)
            logLevel = 0;
        if (options.debug)
            logLevel = 3;
        if (logLevel !== undefined) {
            if (!koishi_utils_1.isInteger(logLevel) || logLevel < 0) {
                utils_1.logger.error('log level should be a positive integer.');
                process.exit(1);
            }
            process.env.KOISHI_LOG_LEVEL = '' + logLevel;
        }
        process.env.KOISHI_CONFIG_FILE = file || '';
        createWorker(options);
    });
}
exports.default = default_1;
