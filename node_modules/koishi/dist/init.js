"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const kleur_1 = require("kleur");
const path_1 = require("path");
const utils_1 = require("./utils");
const js_yaml_1 = require("js-yaml");
const prompts_1 = __importDefault(require("prompts"));
async function createConfig(options) {
    let succeed = true;
    const data = await prompts_1.default([{
            name: 'type',
            type: 'select',
            message: 'Connection Type',
            choices: [
                { title: 'HTTP', value: 'http' },
                { title: 'WebSocket', value: 'ws' },
            ],
        }, {
            name: 'port',
            type: (_, data) => data.type === 'http' ? 'number' : null,
            message: 'Koishi Port',
            initial: 8080,
        }, {
            name: 'server',
            type: (_, data) => data.type === 'http' ? 'text' : null,
            message: 'HTTP Server',
            initial: 'http://localhost:5700',
        }, {
            name: 'server',
            type: (_, data) => data.type === 'ws' ? 'text' : null,
            message: 'WebSocket Server',
            initial: 'ws://localhost:6700',
        }, {
            name: 'selfId',
            type: 'number',
            message: 'Your Bot\'s QQ Number',
        }, {
            name: 'secret',
            type: 'text',
            message: 'Secret for Koishi Server',
        }, {
            name: 'token',
            type: 'text',
            message: 'Token for CoolQ Server',
        }], {
        onCancel: () => succeed = false,
    });
    if (!succeed)
        return;
    const config = {};
    for (const key in data) {
        if (data[key])
            config[key] = data[key];
    }
    config.plugins = ['common', 'schedule'];
    return config;
}
const supportedTypes = ['js', 'json', 'ts', 'yml', 'yaml'];
function default_1(cli) {
    cli.command('init [file]', 'initialize a koishi configuration file')
        .option('-f, --forced', 'overwrite config file if it exists')
        .action(async (file, options) => {
        // resolve file path
        const path = path_1.resolve(process.cwd(), String(file || 'koishi.config.js'));
        if (!options.forced && fs_1.existsSync(path)) {
            utils_1.logger.error(`${options.output} already exists. If you want to overwrite the current file, use ${kleur_1.yellow('koishi init -f')}`);
            process.exit(1);
        }
        // parse extension
        const extension = path_1.extname(path).slice(1);
        if (!extension) {
            utils_1.logger.error(`configuration file should have an extension, received "${file}"`);
            process.exit(1);
        }
        else if (!supportedTypes.includes(extension)) {
            utils_1.logger.error(`configuration file type "${extension}" is currently not supported`);
            process.exit(1);
        }
        // create configurations
        const config = await createConfig(options);
        if (!config) {
            utils_1.logger.error('initialization was canceled');
            process.exit(0);
        }
        // generate output
        let output;
        switch (extension) {
            case 'yml':
            case 'yaml':
                output = js_yaml_1.safeDump(config);
                break;
            default:
                output = JSON.stringify(config, null, 2);
                if (extension === 'js') {
                    output = 'module.exports = ' + output.replace(/^(\s+)"([\w$]+)":/mg, '$1$2:');
                }
                else if (extension === 'ts') {
                    output = 'export = ' + output.replace(/^(\s+)"([\w$]+)":/mg, '$1$2:');
                }
        }
        // write to file
        const folder = path_1.dirname(path);
        if (!fs_1.existsSync(folder))
            fs_1.mkdirSync(folder, { recursive: true });
        fs_1.writeFileSync(path, output);
        utils_1.logger.success(`created config file: ${path}`);
        process.exit(0);
    });
}
exports.default = default_1;
