import { Observed } from 'koishi-utils';
import { Context, Meta, UserData, UserField, GroupData, GroupField } from 'koishi-core';
declare type ActionCallback<T extends {}, K extends keyof T> = (this: Context, meta: Meta, target: Observed<Pick<T, K>>, ...args: string[]) => Promise<any>;
export interface UserAction {
    callback: ActionCallback<UserData, UserField>;
    fields: UserField[];
}
export interface GroupAction {
    callback: ActionCallback<GroupData, GroupField>;
    fields: GroupField[];
}
export declare function registerUserAction<K extends UserField>(name: string, callback: ActionCallback<UserData, K>, fields?: K[]): void;
export declare function registerGroupAction<K extends GroupField>(name: string, callback: ActionCallback<GroupData, K>, fields?: K[]): void;
export default function apply(ctx: Context): void;
export {};
