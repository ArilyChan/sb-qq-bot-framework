"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const defaultOptions = {
    repeat: false,
    interrupt: false,
    interruptText: '打断复读！',
    repeatCheck: false,
    repeatCheckText: (userId) => `[CQ:at,qq=${userId}] 在？为什么重复复读？`,
    interruptCheck: false,
    interruptCheckText: (userId) => `[CQ:at,qq=${userId}] 在？为什么打断复读？`,
};
function getSwitch(sessionSwitch, repeated, times, message) {
    return typeof sessionSwitch === 'boolean' ? sessionSwitch : sessionSwitch(repeated, times, message);
}
function getText(sessionText, userId, message) {
    return typeof sessionText === 'string' ? sessionText : sessionText(userId, message);
}
function apply(ctx, options) {
    options = { ...defaultOptions, ...options };
    ctx = ctx.intersect(ctx.app.groups);
    const states = {};
    function getState(groupId) {
        if (!states[groupId]) {
            states[groupId] = {
                message: '',
                repeated: false,
                times: 0,
                users: new Set(),
            };
        }
        return states[groupId];
    }
    ctx.receiver.on('before-send', ({ groupId, message }) => {
        const state = getState(groupId);
        state.repeated = true;
        if (state.message === message) {
            state.times += 1;
        }
        else {
            state.message = message;
            state.times = 1;
            state.users.clear();
        }
    });
    ctx.prependMiddleware(({ message, groupId, userId, $send }, next) => {
        const state = getState(groupId);
        if (message === state.message) {
            if (state.users.has(userId) && getSwitch(options.repeatCheck, state.repeated, state.times, message)) {
                return next(() => $send(getText(options.repeatCheckText, userId, message)));
            }
            state.times += 1;
            state.users.add(userId);
            if (getSwitch(options.interrupt, state.repeated, state.times, message)) {
                return next(() => $send(getText(options.interruptText, userId, message)));
            }
            if (getSwitch(options.repeat, state.repeated, state.times, message)) {
                return next(() => $send(message));
            }
        }
        else {
            if (getSwitch(options.interruptCheck, state.repeated, state.times, message)) {
                return next(() => $send(getText(options.interruptCheckText, userId, message)));
            }
            state.message = message;
            state.repeated = false;
            state.times = 1;
            state.users = new Set([userId]);
        }
        return next();
    });
}
exports.default = apply;
